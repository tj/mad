#!/usr/bin/env bash

VERSION="0.4.0"
REMOTE=git://github.com/visionmedia/mad-pages.git
REMOTE_MAD=git://github.com/visionmedia/mad.git
CONFIG=${0%/*}/../etc/mad.conf
MAD_CONFIG=${MAD_CONFIG:-$CONFIG}
PAGER=${PAGER:-less}

#
# List all <pages>
#
list_pages() {
  local paths="$MAD_PATH:/usr/local/share/mad:/usr/share/mad"
  local readme_re='^readme'
  # load paths into array
  local path_array=
  IFS=: read -a path_array <<< "$paths"

  shopt -s nocasematch

  echo
  printf "  \033[1mmad pages:\033[0m\n"
  echo
  for path in "${path_array[@]}"; do
    [[ -z "$path" || ! -d "$path" ]] && continue
    while read -r -d '' file; do
      file=${file##*/} # basename
      ext=${file##*.} # extension
      raw_file=${file%.*} # filename w/o extension
      if [[ "$ext" == "md" && ! "$raw_file" =~ $readme_re ]]; then
        printf '    %s\n' "$raw_file"
      fi
    done< <(find "$path" -type f -print0)
  done
  echo
}

#
# Display <page> with lookup via MAD_PATH.
#

display() {
  local page=$1
  local paths=".:$MAD_PATH:${0%/*}/../share/mad:/usr/share/mad"
  # load paths into array
  local path_array=
  IFS=: read -a path_array <<< "$paths"

  for path in "${path_array[@]}"; do
    local file=$path/$page
    local ext=$path/$page.md
    [[ -f "$file" ]] && display_file "$file"
    [[ -f "$ext" ]]  && display_file "$ext"
  done

  echo
  echo "  Failed to locate '$page'"
  echo
  echo "    MAD_PATH=\"$paths\""
  echo
  exit 1
}

#
# Get <prop> from config.
#

get() {
  grep "$1" "$MAD_CONFIG" | awk '{ print $2 }'
}

#
# Display from stdin.
#

display_from_stdin() {
  display_file <(cat)
}

#
# Display <file>
#

display_file() {
  local heading=$(get heading)
  local code=$(get code)
  local strong=$(get strong)
  local em=$(get em)

  < "$1" perl -pe "
      s|^#+ *(.+)|\e[$heading\1\e[0m|g; \
      s|\`(.+?)\`|\e[$code\1\e[0m|g; \
      s|\*\*(.+?)\*\*|\e[$strong\1\e[0m|g; \
      s|__(.+?)__|\e[$strong\1\e[0m|g; \
      s|\*(.+?)\*|\e[$em\1\e[0m|g; \
      s|_(.+?)_|\e[$em\1\e[0m|g; \
      s|    (.+)|    \e[$code\1\e[0m|g; \
      s|<(.+?)>||g; \
      s|^|  |;" \
    | "$PAGER" -R
  exit $?
}

#
# Display the usage for mad(1).
#

display_mad_usage() {
  display_file "${0%/*}/../share/mad/mad.md"
}

#
# Install remote manuals.
#

install_all_remote() {
  local path=${0%/*}/../share/mad
  echo
  echo "  ... cloning repo"
  cd /tmp && rm -fr mad-pages || exit 2
  if git clone --depth 1 "$REMOTE" mad-pages && cd mad-pages; then
    for page in *.md; do
      echo "  ... installing $page"
      cp -f "$page" "$path/$page"
    done
    echo "  ... complete"
  else
    echo "  ... failed!" >&2
  fi
  echo
}

#
# Install mad(1) again.
#

install_mad() {
  echo
  echo "  ... cloning repo"
  cd /tmp && rm -fr mad || exit 3
  git clone --depth 1 "$REMOTE_MAD" mad
  if cd mad && make install; then
    echo "  ... updated to $(mad --version)"
  else
    echo "  ... failed to update!" >&2
  fi
  echo
}

# file required

[[ -z "$1" ]] && display_mad_usage

# parse args

case "$1" in
  -v|--version)
    echo "$VERSION"
    ;;
  -h|--help|help)
    display_mad_usage
    ;;
  -u|--update|update)
    install_all_remote
    ;;
  -U|--update-self|update-self)
    install_mad
    ;;
  -l|--list|ls|list)
    list_pages
    ;;
  -)
    display_from_stdin
    ;;
  *)
    display "$1"
    ;;
esac
